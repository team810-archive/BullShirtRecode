// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.BullShirtRecode.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc810.BullShirtRecode.Robot;
import org.usfirst.frc810.BullShirtRecode.bin.VariableData;

/**
 *
 */
public class FireCannon extends Command {

	private boolean executed = false;
	private long finishTime;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private int m_cannonID;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FireCannon(int cannonID) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_cannonID = cannonID;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	finishTime = System.currentTimeMillis();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(!executed && VariableData.getInstance().getBoolean("safety")) {
    		finishTime = System.currentTimeMillis() + 250; // I guess 250 is the delay on the cannon opening the valve to allow air to push out, and it closing again.
    		Robot.cannon.closeValve(m_cannonID + 4);
    		Robot.cannon.openValve(m_cannonID);
    		executed = true;
    		System.out.println("Launching cannon: " + m_cannonID);
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finishTime < System.currentTimeMillis() || VariableData.getInstance().getBoolean("safety");
    }

    // Called once after isFinished returns true
    protected void end() {
    	System.out.println("Finished launching cannon " + m_cannonID);
    	Robot.cannon.closeValve(m_cannonID);
    	Robot.cannon.openValve(m_cannonID + 4);
    	executed = false;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
